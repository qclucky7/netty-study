package com.netty.study.zerocopy;

/**
 * @author WangChen
 * @since 2020-12-09 11:29
 **/
public class ZeroCopy {


    /**
     *
     *  DMA(Direct Memory Access) 直接内存访问，DMA是允许外设组件将I/O数据直接传送到主存储器中并且传输不需要CPU的参与，来释放CPU时间分片资源
     *
     *  在linux系统中，用户空间与内核空间之间的数据传输是没有类似DMA这种可以不需要CPU参与的传输工具，
     *  所以用户空间与内核空间之间的数据传输是需要CPU全程参与。所有需要通过零拷贝技术来减少和避免不必要的CPU数据拷贝过程。
     *
     *  在上图中，第一步通过DMA技术将磁盘文件中的内容拷贝到内核空间缓冲区中，因为使用了DMA技术，此过程中是不需要CPU参与的。
     *
     *  第二步，将内核缓冲区的数据拷贝到用户空间缓冲区，这一步，全程需要CPU参与的，那这一步能不能优化呢，不拷贝数据呢，可以的，
     *  如果让用户空间和内核空间共享数据，就可以达到这个优化目的，为此linux引入了mmap技术，mmap可以实现用户空间和内核空间数据共享，
     *  而避免减少一次内核空间到用户空间数据拷贝动作，在数据量很大的时候，效率提升尤其明显。其效果如下图所示
     *
     *  但是在图二中，还是有cpu copy动作，就是将内核缓冲区数据拷贝到内核socket缓冲区，那这一步能否优化呢，
     *  在Linux 2.4版本开始，操作系统底层提供了scatter/gather这种DMA的方式来从内核空间缓冲区中将数据直接读取到协议引擎中，
     *  而无需将内核空间缓冲区中的数据再拷贝一份到内核空间socket相关联的缓冲区中。
     *
     *  通过mmap，scatter/gather实现了数据零拷贝全过程，全程无需CPU参与。
     *
     */



}
